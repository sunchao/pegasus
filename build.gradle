plugins {
    id 'java'
    id 'com.google.protobuf' version '0.8.8'
    id 'idea'
    id 'distribution'
    id 'com.github.sherter.google-java-format' version '0.8'
}

allprojects {
    apply plugin: "java"
    apply plugin: 'com.google.protobuf'
    apply plugin: "idea"
    apply plugin: 'project-report'
    apply plugin: 'distribution'

    ext {
        grpcVersion = "1.22.1"
        protobufVersion = "3.9.0"
        protocVersion = protobufVersion
        arrowVersion = "0.14.1"
        parquetVersion = "1.10.1"
        hiveVersion = "2.3.4"
        zookeeperVersion = "3.5.6"
        curatorVersion = "4.2.0"
        log4jVersion = "2.13.0"
        slf4jVersion = "1.7.25"
        hadoopVersion = "2.8.2"
        jacksonVersion = "2.9.8"
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'com.uber.pegasus'
    version = '0.1.0-SNAPSHOT'

    repositories {
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
        maven { url "https://repo.spring.io/plugins-release/" }
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        implementation "io.grpc:grpc-protobuf:${grpcVersion}"
        implementation "io.grpc:grpc-stub:${grpcVersion}"
        implementation "io.grpc:grpc-netty:${grpcVersion}"
        runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}" // TODO: is this needed?
        compileOnly "com.google.protobuf:protobuf-java:${protobufVersion}" // TODO: what is this for?
        compileOnly "javax.annotation:javax.annotation-api:1.2" // TODO: what is this for?
    }

    distributions {
        main {
            baseName = project.name + "-assembly"
            contents {
                into('lib/') {
                    from jar
                    from configurations.runtimeClasspath
                    dirMode = 0755
                    fileMode = 0644
                }
            }
        }
    }
}

subprojects {
    dependencies {
        // Logging (SJF4J/LOG4J)
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"

        implementation("org.apache.hadoop:hadoop-hdfs:${hadoopVersion}") {
            exclude group: 'org.apache.logging.log4j', module: 'log4j-1.2-api'
            exclude group: 'com.google.guava', module: 'guava'
            exclude group: 'io.netty', module: 'netty-all'
        }
        implementation("org.apache.hadoop:hadoop-common:${hadoopVersion}") {
            exclude group: 'org.apache.logging.log4j', module: 'log4j-1.2-api'
            exclude group: 'com.google.guava', module: 'guava'
            exclude group: 'io.netty', module: 'netty-all'
            exclude group: 'org.apache.curator', module: 'curator-framework'
            exclude group: 'org.apache.curator', module: 'curator-client'
            exclude group: 'org.apache.curator', module: 'curator-recipes'
            exclude group: 'org.apache.zookeeper', module: 'zookeeper'
        }
        implementation("org.apache.hadoop:hadoop-auth:${hadoopVersion}") {
            exclude group: 'org.apache.logging.log4j', module: 'log4j-1.2-api'
            exclude group: 'com.google.guava', module: 'guava'
            exclude group: 'io.netty', module: 'netty-all'
            exclude group: 'org.apache.curator', module: 'curator-framework'
            exclude group: 'org.apache.curator', module: 'curator-client'
            exclude group: 'org.apache.curator', module: 'curator-recipes'
            exclude group: 'org.apache.zookeeper', module: 'zookeeper'
        }
        // For HiveConf, which references org.apache.hadoop.mapred.JobConf
        implementation("org.apache.hadoop:hadoop-mapreduce-client-core:${hadoopVersion}") {
            exclude group: 'org.apache.logging.log4j', module: 'log4j-1.2-api'
            exclude group: 'com.google.guava', module: 'guava'
            exclude group: 'io.netty', module: 'netty-all'
        }

        // For parsing YAML files
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
        implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

        // Apache Arrow
        implementation "org.apache.arrow:arrow-vector:${arrowVersion}"
        implementation "org.apache.arrow:arrow-memory:${arrowVersion}"

        testImplementation "junit:junit:4.12"
    }

    test {
        useJUnit()

        maxHeapSize = '1G'

        testLogging {
            events "failed", "passed", "skipped", "standard_out"
            exceptionFormat "full"
            showExceptions true
            showCauses true
            showStackTraces true

            debug {
                events "failed", "passed", "skipped", "standard_error", "standard_out"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat


            // pretty print test results
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, \
${result.successfulTestCount} successes, \
${result.failedTestCount} failures, \
${result.skippedTestCount} skipped)"

                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem +
                            '\n' + ('-' * repeatLength))
                }
            }
        }
    }
}
